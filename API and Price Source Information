The plan is to support high volume coins, and possibly some others. 
To accurately pin a price on the price of bitcoin, we'll use multiple sources for the USD/BTC price.
From each source, the last trade will be determined as the price of the currency on the exchange as it shows what price the units are being sold and purchased at.


To ensure the BTC/USD price is accurate, we must use a large amount of exchange to grab information from. 

Link to Exchnages for BTC/USD
(High volume exchanges)

https://poloniex.com/support/api/
https://docs.gemini.com/rest-api/
https://www.okcoin.com/about/rest_getStarted.do
https://docs.bitfinex.com/
https://btc-e.com/api/3/docs
https://www.kraken.com/help/api
https://www.bitstamp.net/api/

To calculate individual exchange price and the final price, 

	btcusd_prices = {
		    "poloniexBTC_USDT": #,
		    "geminiBTCUSD": #,
		    "okcoinBTCUSD": #,
		    "bitfinexBTCUSD": #,
		    "btceBTCUSD": #,
		    "krakenBTCUSD": (#,
		    "bitstampBTCUSD": #
		}
	
	def get_BTCUSD(btcusd_prices):
		usdpw_usdtotal = 0
		for price in btcusd_prices.values():
			usdpw_usdtotal += price
		usdpw_BTCUSD = usdpw_usdtotal / len(btcusd_prices)
		return usdpw_BTCUSD

We'll use the same API and code from these websites for large coins such as Ethereum, Litecoin, Monero, Ripple, and more if they support it. 




If there are coins without a $COIN/USD trade, then the price of the coin will have to be determined by this calculation.

exchangeCOINUSD = exchangeCOINBTC * usdpw_BTCUSD 

* usdpw_BTCUSD will be the main/average pricepoint calculated from all the exchanges. (See above)


An example of this being used, XMR/USD

	1 poloniexXMRBTC = 0.01795 BTC
	1 BTC = $600 USD
	
	poloniexXMRUSD = 0.01795 * 600
	=> 10.77

The price of 1 XMR is 0.01795 BTC or $10.77 USD.

*poloniexXMRUSD is the variable for the LAST trade on that market pair. 



Poloniex API: https://poloniex.com/public?command=returnTicker # This returns all tickers and currency pair information
Usage: dict['pair']['label']) # pair is the currency pair that you're requesting, label is information.
Example: dict['USDT_BTC']['last] # This would return the last trade for the pairing USDT_BTC

Gemini API: https://api.gemini.com/v1/pubticker/symbol # "symbol" is a currency pair listed on https://api.gemini.com/v1/symbols
Usage: dict['label']) # information you're requesting
Example: dict['last'] # This will return the last traded price for the symbol you're requesting.

OKCoin API: https://www.okcoin.com/api/v1/ticker.do?symbol=symbol # "symbol" is the currency pair that OKCoin supports.
Usage: dict['label'] # information you're requsting
Example: dict['ticker']['last']) # This will return the last traded price for the symbol you're requesting.

Bitfinex API: https://api.bitfinex.com/v1/pubticker/symbol # "symbol" is the currency pair that Bitfinex supports.
Usage: dict['label']) # information you're requesting
Example: dict['last_price'] # This will return the last traded price for the symbol you're requesting.

BTC-e API: https://btc-e.com/api/3/ticker/symbol # "symbol" is the currency pair that BTC-e supports.
Usage: dict['pair']['label']) # information you're requesting
Example: dict['btc_usd']['last_price'] # This will return the last traded price for the symbol you're requesting.

Bitstamp API: https://www.bitstamp.net/api/v2/ticker/symbol # "symbol" is the currency pair that Bitstmap supports.
Usage: dict['pair']['label']) # information you're requesting
Example: dict['last'] # This will return the last traded price for the symbol you're requesting.







